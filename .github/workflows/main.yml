name: Deploy Strapi

on:
  push:
    branches:
      - develop
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}
        run: |
          docker buildx build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            --file ./Dockerfile \
            --tag ${{ secrets.REGISTRY_IMAGE }}:${{ env.IMAGE_TAG }} \
            --push .


  deploy:
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync openssh-client

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

      - name: Deploy to server
        env:
          DEPLOY_TARGET: ${{ secrets.DEPLOY_TARGET }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          COMPOSE_SERVICE: ${{ github.ref == 'refs/heads/main' && secrets.PROD_COMPOSE_SERVICE || secrets.DEV_COMPOSE_SERVICE }}
          COMPOSE_COMMAND: ${{ github.ref == 'refs/heads/main' && secrets.PROD_COMPOSE_COMMAND || secrets.DEV_COMPOSE_COMMAND }}
        run: |
          ssh $DEPLOY_TARGET "cd $DEPLOY_PATH && \
            $COMPOSE_COMMAND pull $COMPOSE_SERVICE && \
            $COMPOSE_COMMAND up -d $COMPOSE_SERVICE && \
            docker image prune -f"
