name: Build and Push Docker Image

on:
  push:
    branches:
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: self-hosted

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Create env file
        run: |
          touch .env
          echo HOST=0.0.0.0 >> .env
          echo PORT=1337 >> .env
          echo APP_KEYS=${{ secrets.APP_KEYS }} >> .env
          echo DATABASE_CLIENT=${{ DATABASE_CLIENT }} >> .env
          echo DATABASE_NAME=${{ DATABASE_NAME }} >> .env
          echo DATABASE_PASSWORD=${{ DATABASE_PASSWORD }} >> .env
          echo DATABASE_PORT=${{ DATABASE_PORT }} >> .env
          echo DATABASE_USERNAME=${{ DATABASE_USERNAME }} >> .env
          echo JWT_SECRET=${{ JWT_SECRET }} >> .env
          echo ADMIN_JWT_SECRET=${{ ADMIN_JWT_SECRET }} >> .env
      
      - name: Deploy with Docker Compose
        run: |
          docker-compose pull
          docker-compose up -d --remove-orphans
